// Geometric Tools LLC, Redmond WA 98052
// Copyright (c) 1998-2015
// Distributed under the Boost Software License, Version 1.0.
// http://www.boost.org/LICENSE_1_0.txt
// http://www.geometrictools.com/License/Boost/LICENSE_1_0.txt
// File Version: This file is automatically generated.

#include "GteOpenGL.h"
#include <cassert>
#include <cstring>
#include <fstream>

// Support for versioning.
#define OPENGL_VERSION_NONE  0
#define OPENGL_VERSION_1_0  10
#define OPENGL_VERSION_1_1  11
#define OPENGL_VERSION_1_2  12
#define OPENGL_VERSION_1_3  13
#define OPENGL_VERSION_1_4  14
#define OPENGL_VERSION_1_5  15
#define OPENGL_VERSION_2_0  20
#define OPENGL_VERSION_2_1  21
#define OPENGL_VERSION_3_0  30
#define OPENGL_VERSION_3_1  31
#define OPENGL_VERSION_3_2  32
#define OPENGL_VERSION_3_3  33
#define OPENGL_VERSION_4_0  40
#define OPENGL_VERSION_4_1  41
#define OPENGL_VERSION_4_2  42
#define OPENGL_VERSION_4_3  43
#define OPENGL_VERSION_4_4  44
#define OPENGL_VERSION_4_5  45

// Support for querying the OpenGL function pointers.  Each platform must
// provide its own GetOpenGLFunctionPointer.
template <typename PGLFunction>
static void GetOpenGLFunction(char const* name, PGLFunction& function)
{
    extern void* GetOpenGLFunctionPointer(char const*);
    function = (PGLFunction)GetOpenGLFunctionPointer(name);
}

// Provide a listener for assertions in the GteOpenGL.cpp file.  The
// function reports the function passed to ReportGLError or when the
// queried function pointer is null.
extern void OpenGLReportListener(char const* function, GLenum code);

//----------------------------------------------------------------------------
static int GetOpenGLVersion()
{
    GLint major, minor;
    glGetIntegerv(GL_MAJOR_VERSION, &major);
    glGetIntegerv(GL_MINOR_VERSION, &minor);
    return 10 * major + minor;
}
//----------------------------------------------------------------------------
static void ReportGLError(const char* glFunction)
{
    // code:
    //   0x0500 GL_INVALID_ENUM
    //   0x0501 GL_INVALID_VALUE
    //   0x0502 GL_INVALID_OPERATION
    //   0x0503 GL_STACK_OVERFLOW
    //   0x0504 GL_STACK_UNDERFLOW
    //   0x0505 GL_OUT_OF_MEMORY
    //   0x0506 GL_INVALID_FRAMEBUFFER_OPERATION
    //   0x0507 GL_CONTEXT_LOST

    GLenum code = glGetError();
    while (code != GL_NO_ERROR)
    {
        OpenGLReportListener(glFunction, code);
        code = glGetError();
    }
}
//----------------------------------------------------------------------------
static void ReportGLNullFunction(const char* glFunction)
{
    OpenGLReportListener(glFunction, GL_ZERO);
}
//----------------------------------------------------------------------------
